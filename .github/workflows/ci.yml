name: CI
on: [push, pull_request]
#  schedule:
#    - cron: '0 0-23/4 * * *'
jobs:
  windows:
    name: Windows
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: x64
            arch: x64
            triplet: x64-windows
            # fribidi is disabled due to timeouts when installing the package
            configFlags: --enable-faad --enable-mpeg2 --enable-discord --disable-fribidi
            vcpkgPackages: 'curl discord-rpc faad2 fluidsynth freetype glew libflac libjpeg-turbo libmad libmpeg2 libogg libpng libtheora libvorbis sdl2 sdl2-net zlib giflib'
    env:
      CONFIGURATION: Release
      PLATFORM: ${{ matrix.platform }}
      BUILDCACHE_IMPERSONATE: cl.exe
      BUILDCACHE_MAX_CACHE_SIZE: 2500000000
      BUILDCACHE_HARD_LINKS: true
      BUILDCACHE_PERF: true
      CLToolExe: buildcache.exe
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: ilammy/setup-nasm@v1
        if: ${{ matrix.useNasm }} == 'true'
      - name: Build cache
        uses: mikehardy/buildcache-action@v1.2.2
        with:
          install_dir: C:\ProgramData
          cache_key: ${{ matrix.triplet }}
          upload_buildcache_log: true
      - name: Clear cache
        run: |
          $env:BUILDCACHE_IMPERSONATE = ""
          buildcache -c
          $env:BUILDCACHE_IMPERSONATE = "cl.exe"
      - name: Install vcpkg and packages
        uses: lukka/run-vcpkg@v7
        id: runvcpkg
        with:
          vcpkgGitCommitId: b67fab9861239e33b722b9a44f5c96dec6ca807e
          vcpkgTriplet: '${{ matrix.triplet }}'
          vcpkgArguments: '${{ matrix.vcpkgPackages }}'
#      - name: Upload libs
#        uses: actions/upload-artifact@v2
#        with:
#          name: libs-${{ matrix.triplet }}
#          path: ${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_ROOT_OUT }}\\installed\\${{ matrix.triplet }}
      - name: Build create_project
        run: |
          cd devtools/create_project/cmake
          cmake -DCMAKE_CXX_COMPILER_LAUNCHER=buildcache .
          cmake --build . -j 2
          ls
          cd ../../../
      - name: Call create_project
        run: |
          New-Item -ItemType Directory -Force -Path C:\build-scummvm
          New-Item -ItemType Junction -Path build-scummvm -Target C:\build-scummvm
          cd build-scummvm
          ../devtools/create_project/cmake/Debug/create_project.exe .. --msvc --enable-all-engines ${{ matrix.configflags }} --use-canonical-lib-names
          ls
      - name: set SCUMMVM_LIBS env variable
        run: |
          echo "SCUMMVM_LIBS=${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_ROOT_OUT }}\\installed\\${{ matrix.triplet }}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2
      - name: Build scummvm
        run: |
          cd build-scummvm
          ls
          msbuild scummvm.sln /m /p:BuildInParallel=true /p:Configuration=${{ env.CONFIGURATION }} /p:PreferredToolArchitecture=x64 /p:Platform=${{ matrix.platform }}
